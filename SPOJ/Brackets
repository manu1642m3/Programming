#include<stdio.h>
#include<algorithm>

#define ll int
#define sc(a) scanf("%d",&a)
#define pr(a) printf("%d",a)
#define fo(i,a,b) for(ll i=a;i<=b;i++)

using namespace std;

ll A[1000005];

struct noddy
{ll cl,op;
}; struct noddy tree[1000005];

void update(ll node,ll start, ll last, ll index);
void construct (ll node,ll start, ll last);

int main()
{ll n,q,a;
 char ch;
for(int ho=1;ho<=10;ho++)
{printf("Test %d:\n",ho);
  sc(n);
  scanf("%c",&ch);
   fo(i,1,n)
    {scanf("%c",&ch);
      if(ch==')')
       A[i]=0;
        else
         A[i]=1;
    }
    
    if(n%2!=0)
     {sc(q);
       while(q--)
        {sc(a);
          if(a==0)
           printf("NO\n");
        }
         continue;
     }
     
    construct(1,1,n);
    
     sc(q);
      while(q--)
       {sc(a);
       if(a==0)
        {
            if(tree[1].op==0&&tree[1].cl==0)
             printf("YES\n");
              else 
               printf("NO\n");
        }
         else
          update(1,1,n,a);
          
       }
}       
         return 0;
}
    
    
void construct (ll node,ll start, ll last)
{if(start==last)
  {if(A[start]==1)
    {tree[node].op=1;tree[node].cl=0;}
     else
      {tree[node].op=0;tree[node].cl=1;}
  
     
  }
  
  else
  {
    construct(2*node,start,(start+last)/2);
    construct(1+(2*node),1+(start+last)/2,last);
  
     ll mini;
        mini=min(tree[2*node].op,tree[1+(2*node)].cl);
       
        
   
        tree[node].op=tree[2*node].op+tree[1+(2*node)].op-mini;
        tree[node].cl=tree[2*node].cl+tree[1+(2*node)].cl-mini;
  }
}

void update(ll node,ll start, ll last, ll index)
{
    if(start==last&&last==index)
  {if(A[index]==1)
    {tree[node].op=0;tree[node].cl=1;A[index]=0;}
     else
      {tree[node].op=1;tree[node].cl=0;A[index]=1;}
       
  }
  else
   {  if(start<=index&&index<=last)
       { update(2*node,start,(start+last)/2,index);
         update(1+2*node,1+(start+last)/2,last,index);
      
      
          ll mini;
             mini=min(tree[2*node].op,tree[1+2*node].cl);
   
             
   
             tree[node].op=tree[2*node].op+tree[1+2*node].op-mini;
             tree[node].cl=tree[2*node].cl+tree[1+2*node].cl-mini;
      
       }
   }
    
}