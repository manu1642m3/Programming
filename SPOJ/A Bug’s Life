#include<stdio.h>
#include<queue>

using namespace std;
int calling (int);
struct outer
{ int state;
  int visited;
  int occ;
   struct inner
    {int data;
     int inserted;
    }; struct inner B[2005];
}; struct outer A[2005];

int main()
{ int t,a,b,c,d,tt,num;
   scanf("%d",&t);
    for(tt=1;tt<=t;tt++)
     {
        
       scanf("%d%d",&a,&b);
        for(int i=1;i<=a;i++)
           { A[i].state=0;A[i].visited=0;A[i].occ=0;
              for(int j=1;j<=a;j++)
               {A[i].B[j].inserted=0;}
           }
        while(b--)
         {
           scanf("%d%d",&c,&d);
            if(A[c].B[d].inserted==0)
             {A[c].B[A[c].occ].data=d;
              A[d].B[A[d].occ].data=c;
              A[c].B[d].inserted=1;
              A[d].B[c].inserted=1;
              A[c].occ=A[c].occ+1;
              A[d].occ=A[d].occ+1;
             }
         }
         
        
          for(int i=1;i<=c;i++)
           {if(A[i].state==0)
             {A[i].state=1;num=calling(i);}
               if(num==1) break;
           }
            printf("Scenario #%d:\n",tt);
            if(num==1)
             printf("Suspicious bugs found!\n");
              else printf("No suspicious bugs found!\n");
     }
      return 0;
}

int calling(int i)
{int num=0;
  queue<int> myqueue;
  myqueue.push(i);
  
  while(!myqueue.empty())
   { int yo=myqueue.front();
      myqueue.pop();
      A[yo].visited=1;
     
       for(int k=0;k<A[yo].occ;k++)
        {  
            if(A[A[yo].B[k].data].state==A[yo].state&&A[A[yo].B[k].data].visited==1)
             return 1;
              else
               if(A[A[yo].B[k].data].state==0)
                {A[A[yo].B[k].data].state=-1*A[yo].state; myqueue.push(A[yo].B[k].data);}
        }

   }
     return 0;
}