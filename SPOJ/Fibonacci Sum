#include<stdio.h>
#define ll long long
#define mod 1000000007

void multiply(ll F[2][2],ll M[2][2]);
 
/* Helper function that calculates F[][] raise to the power n and puts the
  result in F[][]
  Note that this function is desinged only for fib() and won't work as general
  power function */
void power(ll F[2][2], ll n);
 
ll fib(ll n)
{
  ll F[2][2] = {{1,1},{1,0}};
  if (n == 0)
      return 0;
  power(F, n-1);
 
  return F[0][0];
}
 
void multiply(ll F[2][2],ll M[2][2])
{
  ll x =  (F[0][0]*M[0][0])%mod + (F[0][1]*M[1][0])%mod;
  ll y =  (F[0][0]*M[0][1])%mod + (F[0][1]*M[1][1])%mod;
  ll z =  (F[1][0]*M[0][0])%mod + (F[1][1]*M[1][0])%mod;
  ll w =  (F[1][0]*M[0][1])%mod + (F[1][1]*M[1][1])%mod;
 
  F[0][0] = x%mod;
  F[0][1] = y%mod;
  F[1][0] = z%mod;
  F[1][1] = w%mod;
}
 
 void power(ll F[2][2], ll n)
{
  if( n == 0 || n == 1)
      return;
  ll M[2][2] = {{1,1},{1,0}};
 
  power(F, n/2);
  multiply(F, F);
 
  if (n%2 != 0)
     multiply(F, M);
}
 

int main()
{ int t;
   scanf("%d",&t);
    while(t--)
     { ll n,m;
        scanf("%lld%lld",&n,&m);
         ll number=(fib(m+2)-fib(n+1)+mod)%mod;
         
           printf("%lld\n",number);
     }
      return 0;
      
}
