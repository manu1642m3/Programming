#include<stdio.h>
#define ll long long
void merge(ll arr[], ll l, ll m, ll r);
void mergeSort(ll arr[], ll l, ll r);
int main()
{ll t,r,n,A[1000000],sum,i,j;
 scanf("%llu",&t);
 for( j=1;j<=t;j++)
  {  sum=0;
      scanf("%llu%llu",&r,&n);
       for(i=0;i<n;i++)
         scanf("%llu",&A[i]);
         mergeSort(A,0,n-1);
      for(i=n-1;i>=0;i--)
       { sum+=A[i];
          if(sum>=r)
           break;
       }
       
       printf("Scenario #%llu:\n",j);
       if(sum>=r)
        printf("%llu\n",n-i);
         else printf("impossible\n");
        
  }
  
  return(0);
}

void merge(ll arr[], ll l, ll m, ll r)
{
    ll i, j, k;
    ll n1 = m - l + 1;
    ll n2 =  r - m;
 
    /* create temp arrays */
    ll L[n1], R[n2];
 
    /* Copy data to temp arrays L[] and R[] */
    for(i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for(j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    /* Merge the temp arrays back into arr[l..r]*/
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    /* Copy the remaining elements of L[], if there are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    /* Copy the remaining elements of R[], if there are any */
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
/* l is for left index and r is right index of the sub-array
  of arr to be sorted */
void mergeSort(ll arr[],ll l, ll r)
{
    if (l < r)
    {
        int m = l+(r-l)/2; //Same as (l+r)/2, but avoids overflow for large l and h
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
 
 
  